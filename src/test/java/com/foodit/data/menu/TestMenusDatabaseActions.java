package com.foodit.data.menu;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.io.File;
import java.net.URL;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.foodit.data.restaurant.Restaurant;
import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;
import com.google.appengine.tools.development.testing.LocalServiceTestHelper;
import com.google.common.io.Resources;
import com.googlecode.objectify.Objectify;
import com.googlecode.objectify.ObjectifyService;

public class TestMenusDatabaseActions {

	@SuppressWarnings("unused")
	private final static Logger logger = LoggerFactory.getLogger(TestMenusDatabaseActions.class);

	private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());

	ObjectMapper mapper = new ObjectMapper();

	@Before
	public void setUp() throws Exception {
		helper.setUp();
	}

	@After
	public void tearDown() throws Exception {
		helper.tearDown();
	}

	@Test
	public void test_addLoadedToRestaurant() {
		final Objectify ofy = ObjectifyService.ofy();

		/**
		 * Step 1 create a parent restaurant entity
		 */
		final Restaurant restaurant = new Restaurant();
		restaurant.setName("name");

		ofy.save().entity(restaurant).now();
		final Long restaurantId = restaurant.getId();

		assertNotNull("Restaurant Id is autogenerated", restaurantId);

		/**
		 * Step 2 - Read menu data from file
		 */

		final Menus menus = loadPojoFromFile();

		/**
		 * Step 3 - Each menu is entered as a separate record
		 */
		for (Menu menu : menus.getMenu()) {

			menu.setRestaurantId(restaurantId);
			ofy.save().entity(menu).now();

		}

		/**
		 * Step 4 - Check DB entries
		 */
		List<Menu> listMenu = ofy.load().type(Menu.class).list();

		// logger.info(listMenu.toString());

		assertEquals("No. menu categories", 10, listMenu.size());

		listMenu = ofy.load().type(Menu.class).filter("restaurantId", restaurantId).list();

		assertEquals("No. menu categories when filtered", 10, listMenu.size());

	}

	/**
	 * loads menu from small json file
	 * 
	 * @return
	 */
	private Menus loadPojoFromFile() {
		try {
			URL jsonResource = Resources.getResource("AllMenus.json");
			File jsonFile = new File(jsonResource.toURI());

			Menus menus = mapper.readValue(jsonFile, Menus.class);

			return menus;
		} catch (Exception e) {
			fail(e.getMessage());
			return null;
		}

	}

}
